About the snaplet-hdbc library
==============================

Many applications use a relational database for information storage. A popular
library, called HDBC, already exists to make this possible. The snaplet-hdbc
library provides two snaplets to make it easier to integrate HDBC into your web
application: `Snap.Snaplet.Auth.Backends.Hdbc` and `Snap.Snaplet.Hdbc`. The
former serves as a backend for Snap's own authentication snaplet, while the
latter provides an abstraction over the plain HDBC functions. This tutorial
assumes that you are familiar with writing your own snaplet. If you are not
familiar with snaplets yet, please consider studying the snaplet tutorial
first.

In this tutorial we will write a small application that uses these two snaplets
to interact with an SQLite database. Since this tutorial is written as a
Literate Haskell file, we first define the module and the imports:

> module SnapletHDBCApp where
>
> import            Data.Lens.Template
> import            Database.HDBC.Sqlite3
> import            Snap.Core
> import            Snap.Snaplet
> import            Snap.Snaplet.Auth
> import            Snap.Snaplet.Auth.Backends.Hdbc
> import            Snap.Snaplet.Hdbc
> import            Snap.Snaplet.Session
> import            Snap.Snaplet.Session.Backends.CookieSession


Snaplet state
=============

Our goal is to be able to authenticate against a database, remember the fact
that we are logged in and then retrieve some information from the database.
Before we can do so, we need to define our snaplet's state and generate the
corresponding lenses:

> data App = App
>   {  _authLens  :: Snaplet (AuthManager App)
>   ,  _sessLens  :: Snaplet SessionManager
>   ,  _dbLens    :: Snaplet (HdbcSnaplet Connection)
>   }
>
> makeLens ''App

The 'authLens' allows us to do the actual authentication, while the 'sessLens'
allows us to remember the result of the authentication attempt. As you might
have guessed, the 'dbLens' allows us to interact with the database. The
'AuthManager', 'SessionManager' and 'HdbcSnaplet' types are provided by the
corresponding snaplets, while the 'Connection' type is provided by HDBC. In
this case, 'Connection' represents a connection to our SQLite database.

After having defined the application state, we can start writing our
initialiser:

> tutorialAppInit :: SnapletInit App App
> tutorialAppInit = makeSnaplet "snaplet-hdbc-tutorial"
>   "A tutorial snaplet showing the use of snaplet-hdbc" Nothing $ do
>   addRoutes  [  ("/",  ifTop indexHandler)
>              ,  ("",   serveDirectory "resources/static")
>              ]
>   _sesslens'  <- nestSnaplet "session" sessLens $ initCookieSessionManager
>                    "config/site_key.txt" "_session" Nothing
>   let sqli = connectSqlite3 "resources/tutorial.db"
>   _dblens'    <- nestSnaplet "hdbc" dbLens $ hdbcInit sqli
>   _authlens'  <- nestSnaplet "auth" authLens $ initHdbcAuthManager
>                    defAuthSettings sessLens sqli defAuthTable defQueries
>   return  $ App _authlens' _sesslens' _dblens'

Many things are happening in this initialiser. First we define a route and a
fallback handler, after which we initialise a session manager which stores the
session information in a cookie. We then use the 'connectSqlite3' function from
HDBC to make a connection to the 'tutorial.db' file locate in the 'resources'
directory, which sits in our project directory. This gives us a value of type
'IO Connection' in 'sqli'. We use this raw connection to initialise both the
HDBC snaplet and the HDBC authentication snaplet, which happens on the
following two lines.

Initialising the HDBC snaplet is simple enough. We just pass the SQLite
connection we obtained earlier  to the initialiser and use to usual
'nestSnaplet' function to nest the HDBC snaplet in our application snaplet. The
HDBC authentication snaplet on the other hand, has several parameters. Lets go
through them one by one:

  - 'defAuthSettings' is exposed by the authentication snaplets and  offers a
    default value of type 'AuthSettings', which contains information about your
    sessions.
  - 'sessLens' is the session lens that has been generated by Template Haskell
    using the 'makeLens' function.
  - 'sqli' is the raw database connection we have defined earlier in the
    initialiser.
  - 'defAuthTable' is exposed by the HDBC authentication snaplet and it
    provides a default set of column names for the table against you will
    authenticate. It is of type 'AuthTable'.
  - 'defQueries' is again exposed by the HDBC authentication snaplet and
    contains a default set of functions which generate the SQL queries the
    snaplet uses for the authentication process. Its type is 'Queries'.

By separating the column names from the actual queries, it becomes possible to
support varying usecases. In the simplest case, the application uses the
default table layout and the default queries. When different column names are
desired, one will only need to provide a custom value of type 'AuthTable' and
the queries will automatically use these new names. If completely custom
queries are desired, one can easily override them by providing a custom value
of type 'Queries'. This allows for, e.g., using stored procedures for
authentication.

After all lenses are intiailised, the 'App' type is constructed and the
initialiser's work is done.

TODO:
- Write about using resource-pool
- 
